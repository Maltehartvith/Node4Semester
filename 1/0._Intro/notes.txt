for loops are error prone and not functional. They are overly verbose, so in general we dont like for loops in js. 

You can send data with a get request in two ways
You can use path variable which is with a number = url: localhost:8080/beers/1
or use can use Query string = url: ?key=value&key2=value2 ex = /kangaroofacts?canKick=true
app.get("/kangaroofacts", (req, res) => {
    res.send(req.query);
});


npm -g install nodemon
nodemon helps you with building the project for each time you save the project, so you dont have to stop it and run it again.

As before where we got a static folder for the html files and css, with js we will call it public. 

Things that should be looked more into: variables such as let, var and const
Pretty code

When you have to set the id, it is better to set a variable that pluses. When you set fx AUTO_INCREMENT++ the next time you get the id it is
AUTO_INCREMENT'ed. if you do ++AUTO_INCREMENT it will increase at the call.

AUTO_INCREMENT 3:
AUTO_INCREMENT++ = 3
AUTO_INCREMENT = 4

or 
++AUTO_INCREMENT = 4
AUTO_INCREMENT = 4

parseInt vs Number
Number is hard specified to be a number, where parseInt you are "pleading" it to be a number, and with parsing int, you are specifying to be an 
integer but with number, it can be any type of number. 

node is a js runtime enviorment 


how to create a svelte project:
npx degit sveltejs/template folderName

for svelte, if you want more pages to change between, you can insert --single into the package.json,
See 8._Kea_Shop as an example


When we are creating a project with a client and server, we will open up two terminals. 
The client terminal will run with npm run dev, and the server we can use nodemon.
On our server we can install a database driver, in our case we use sqlite: npm i sqlite sqlite3

mongoose.com

for at sætte en mongo db op skal man først lave en data folder i ens root
og derefter skal man lave en db folder inde i den.
Derefter kan man først kører ./mongod i et powershell vindue, og derefter
køre ./mongo i en anden.

Nu kan man vise databases ved at skrive show dbs, og lave en ny ved at skrive
use dbnavn.
Bagefter for at lave et "table" kan man skrive db.getCollection("navn")

For at sætte noget ind i tablet skal man skrive: db.TableName.insert({ field: "name" })
for at finde noget i en table kan man skrive db.TableName.find()
ellers kan man søge ved at skrive db.TableName.find({ id: 2 }) hvis man
fx har defineret id.
Man kan også sætte conditions for ens search. Såsom db.TableName.find({ id: {$gt: 1}})
$gt = greater than
$lt = less than
$et = equal to


For at opdatere skal man skrive db.TableName.update({where}, {update})
fx med video kan man skrive 
db.tutorials.udate({ channelName: "How to Basic" }, {viewCounter: 123123123})
men med denne linje vil man overskrive channelName og udskifte den med viewCounter.

Det man kan gøre er at skrive { $set: { nytField } }, hvilket tilføjer det til objektet
db.tutorials.udate({ channelName: "How to Basic" }, {$set: {viewCounter: 123123123}})
Det man gør er at sætte et key value pair, hvor man så kan få tilføjet et ekstra field,
til en allerede eksisterende mongoDB objekt


For at slette én, kan man skrive db.TableName.deleteOne({ det man vil slette på })
for at slette mange, kan man skrive db.TableName.deleteMany({ det man vil slette på})
deleteMany, gør at man sletter alle som opfylder det kriterie man skriver ind,
deleteOne sletter den første instans af det kriterie man har skrevet, og ikke flere.
remove gør det sammen som deleteMany



CRUD i mongodb
c - insert
r - find
u - update
d - deleteOne/deleteMany/remove
